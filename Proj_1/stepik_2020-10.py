# =================================================================================================
#                            2.6.1
# =================================================================================================

''' Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел
не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.

Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.

В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю
и выводим сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.
'''


def f261():
    a = [int(input())]
    i = 0
    s = a[i]
    while s != 0:
        i += 1
        a.append(int(input()))
        s += a[i]
    p = 0
    l = len(a)
    for i in range(l):
        p += a[i] ** 2
    print(p)
    return 0


# =================================================================================================
#                            2.6.2
# =================================================================================================

''' Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число 
повторяется столько раз, чему равно). На вход программе передаётся неотрицательное целое число n — столько элементов 
последовательности должна отобразить программа. На выходе ожидается последовательность чисел, записанных через пробел 
в одну строку.

Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.
'''


def f262():
    n = int(input())
    i, j = 0, 0
    while i < n:
        j += 1
        x, k = j, 1
        while x >= k:
            k += 1
            i += 1
            print(x, end=' ')
            if i == n:
                break
    return 0


# =================================================================================================
#                            2.6.3
# =================================================================================================

''' Напишите программу, которая считывает список чисел lst lst lst из первой строки и число x x x из второй строки, 
которая выводит все позиции, на которых встречается число x x x в переданном списке lst lst lst.

Позиции нумеруются с нуля, если число x x x не встречается в списке, вывести строку "Отсутствует" (без кавычек, 
с большой буквы).

Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.
'''


def f263():
    st = [int(i) for i in input().split()]
    x = int(input())
    k, e = 0, 0
    for i in st:
        if i == x:
            print(k, end=' ')
            e += 1
        k += 1
    if e == 0:
        print('Отсутствует')
    return 0


# =================================================================================================
#                            2.6.4
# =================================================================================================

''' Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк, 
заканчивающихся строкой, содержащей только строку "end" (без кавычек)

Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов 
первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится 
с противоположной стороны матрицы.

В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.
'''


def f264():
    j = 0
    k = 0
    a = []
    while j >= 0:
        st = [i for i in input().split()]
        if st[0] == 'end':
            j = -1
        else:
            st = [int(i) for i in st]
            a.append(st)
            j += 1
    n = len(a)
    k = len(a[0])
    b = []
    for i in range(n):
        c = []
        for j in range(k):
            x1 = i - 1
            x2 = i + 1
            y1 = j - 1
            y2 = j + 1
            if i == 0:
                x1 = n - 1
            if i == n - 1:
                x2 = 0
            if j == 0:
                y1 = k - 1
            if j == k - 1:
                y2 = 0
            c += [a[x1][j] + a[x2][j] + a[i][y1] + a[i][y2]]
            print(c[j], end=' ')
        b.append(c)
        print()
    return 0


# =================================================================================================
#                            2.6.5
# =================================================================================================

''' Выведите таблицу размером n×n, заполненную числами от 1 до n^2 по спирали, выходящей из левого верхнего угла 
и закрученной по часовой стрелке, как показано в примере (здесь n=5)

Sample Input:
5

Sample Output:
1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9
'''


def gonext(a, b):
    b += 1
    if b == len(a):
        b = 0
    return b


def f265():
    n = int(input('Введите размер таблицы n*n : '))
    #    n = int(input())
    ar = [[0] * n for i in range(n)]
    #    print(ar)
    cl = n ** 2
    c, i, j = 1, 0, 0
    di = ['right', 'down', 'left', 'up']
    idi = 0
    ar[i][j] = c
    while c < cl:
        st = 0
        while st == 0:
            if di[idi] == 'right':
                if j == n - 1:
                    idi = gonext(di, idi)
                else:
                    j += 1
                    if ar[i][j] != 0:
                        idi = gonext(di, idi)
                        j -= 1
                    else:
                        st = 1
            if di[idi] == 'left':
                if j == 0:
                    idi = gonext(di, idi)
                else:
                    j -= 1
                    if ar[i][j] != 0:
                        idi = gonext(di, idi)
                        j += 1
                    else:
                        st = 1
            if di[idi] == 'down':
                if i == n - 1:
                    idi = gonext(di, idi)
                else:
                    i += 1
                    if ar[i][j] != 0:
                        idi = gonext(di, idi)
                        i -= 1
                    else:
                        st = 1
            if di[idi] == 'up':
                if i == 0:
                    idi = gonext(di, idi)
                else:
                    i -= 1
                    if ar[i][j] != 0:
                        idi = gonext(di, idi)
                        i += 1
                    else:
                        st = 1
        c += 1
        ar[i][j] = c
    for i in range(n):
        for j in range(n):
            if ar[i][j] < 10:
                print('', ar[i][j], end=' ')
            else:
                print(ar[i][j], end=' ')
        print()

    return 0


# ===== поворот матрицы против часовой стрелки ======
'''
for j in range(n-1, -1, -1):
    for i in ar:
        print(i[j], end=" ")
    print()
'''

# =================================================================================================
#                            3.1.1
# =================================================================================================
''' Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой:
f(x)={ 1−(x+2)^2,   при x≤−2 
        −x/2,       при −2<x≤2 
        (x−2)^2+1,  при 2<x 
Требуется реализовать только функцию, решение не должно осуществлять операций ввода-вывода.
'''


def fx(x):
    if x <= -2:
        return 1 - (x + 2) ** 2
    elif x <= 2:
        return -x / 2
    else:
        return (x - 2) ** 2 + 1


def f311():
    x = float(input())
    print(fx(x))


# =================================================================================================
#                            3.1.2
# =================================================================================================
''' Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него 
все нечётные значения, а чётные нацело делит на два. 
Функция не должна ничего возвращать, требуется только изменение переданного списка
'''


def modify_list(l):
    ll, i = len(l), 0
    while i < ll:
        if l[i] % 2 == 0:
            l[i] = l[i] // 2
            i += 1
        else:
            del l[i]
            ll -= 1
    return


def f312():
    lst = [int(i) for i in input().split()]
    #    print(lst)
    print(modify_list(lst))
    print(lst)
    modify_list(lst)
    print(lst)


# =================================================================================================
#                            3.2.1 Множества (sets)
# =================================================================================================
def f3201():
    basket = set()
    box = {'apple', 'banana'}
    print(box)
    print(basket)
    basket.add('orange')
    print(len(basket))
    print(basket)
    for i in box:
        basket.add(i)
    print(len(basket))
    print(basket)
    st = input()
    if st in basket:
        basket.remove(st)
    print(basket)
    return


def f3202():
    d1 = {}
    d2 = dict()
    d3 = {1: 'Ann', 2: 'Bob', 3: 'Clair'}
    d1['a'] = 101
    print(d1['a'])
    print(d2)
    d3[4] = 'Dick'
    print(d3)
    print(d3.get(1))
    del d3[3]
    print(d3)
    for key in d3:
        print(key, end=' ')
    print()
    for key in d3.keys():
        print(key, end=' ')
    print()
    for val in d3.values():
        print(val, end=' ')
    print()
    for key, val in d3.items():
        print(key, val, end=' ')
    print()
    d3[3] = ['Cat', 'Chack']
    for key, val in d3.items():
        print(key, val, end=' ')
    return


# ========================================== 3.2.1 ===========================================
''' Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d 
и два числа: key и value.

Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу.
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2∗key.
Если и ключа 2∗key нет, то нужно добавить ключ 2∗key в словарь и сопоставить ему список из 
переданного элемента [value].

Требуется реализовать только эту функцию, кода вне неё не должно быть.
Функция не должна вызывать внутри себя функции input и print.'''


def update_dictionary0(d, key, value):
    k = key
    if k in d.keys():
        lst = d[k]
        lst.append(value)
    #        print(d[k])
    else:
        if k * 2 in d.keys():
            lst = d[k * 2]
            lst.append(value)
        #           print(d[k*2])
        else:
            d[k * 2] = [value]
    return


def update_dictionary1(d, key, value):
    if key in d:
        d[key] += [value]
    elif 2 * key in d:
        d[2 * key] += [value]
    else:
        d[2 * key] = [value]
    return


'''get(key) по умолчанию возвращает None если ключа нет в списке. 
Но вы можете изменить это значение передав его в функцию через запятую после значения ключа 
get(key, value) (по аналогии с функцией range()). В данном случае он меняет None на пустой список []. 
В случае, если такого ключа не будет в словаре, то функция get вернет не None, а вернет пустой список. 
Следовательно, у нас появится ключ key, которому будет соответствовать значение [] (т.е пустой список).'''


def update_dictionary(d, key, value):
    key += key * (key not in d)
    d[key] = d.get(key, []) + [value]
    return


def f321():
    d = {}
    print(update_dictionary(d, 1, -1))  # None
    print(d)  # {2: [-1]}
    update_dictionary(d, 2, -2)
    print(d)  # {2: [-1, -2]}
    update_dictionary(d, 1, -3)
    print(d)


# ========================================== 3.2.2 ===========================================
'''Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве 
используется в этой книге.

Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, 
разделённые пробелом и вывести получившуюся статистику.

Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального 
слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" 
(см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.'''

    # dic = {key:value for key in source}

def f322():
    str = input().lower().split()
    dic = {}
    for i in str:
        if i in dic:
            dic[i] += 1
        else:
            dic[i] = 1
    for key, val in dic.items():
        print(key,val)
    return

def f3221():
    str = input().lower().split()
    ar = []
    for i in str:
        if i not in ar:
            ar.append(i)
    for i in ar:
        print(i,str.count(i))
    return

def f3222():
    str = input().lower().split()
    for i in set(str):
        print(i,str.count(i))
    # print(set(str))
    return

'''Решение компактнее, чем через словарь, но если посмотреть на время выполнения, 
то уже на данных от 20-25 слов суммарно получается медленее выполнение. 
Из-за того, что вот так count считать всё время по большому массиву - очень невыгодно'''

def f3223():
    str = input().lower().split()
    [print(i,str.count(i)) for i in set(str)]
    return

def f3224():
    x = input().lower().split()
    a = {i:x.count(i) for i in x}
    {print(i,j) for i,j in a.items()}
    return

def f3225():
    x = input().lower().split()
    a = {i:0 for i in x}
    for i in x:
        a[i] += 1
    [print(i,j) for i,j in a.items()]
    return

# =================================================================================================
#                            Main
# =================================================================================================

f3225()

